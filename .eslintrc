{
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "@typescript-eslint",
    "jest",
    "custom-rules",
    "import"
  ],
  "parserOptions": {
    // Allows for the parsing of modern ECMAScript features
    "ecmaVersion": 2021,
    // Allows for the use of imports
    "sourceType": "module",
    "ecmaFeatures": {
      // Allows for the parsing of JSX
      "jsx": true,
      "arrowFunctions": true
    },
    "project": "./tsconfig.json"
  },
  "settings": {
    "react": {
      // Tells eslint-plugin-react to automatically detect the version of React to use
      "version": "detect"
    },
    "import/resolver": {
      "node": {
        "extensions": [
          ".ts",
          ".tsx"
        ],
        "paths": [
          "./src"
        ]
      }
    }
  },
  "extends": [
    "plugin:jest/recommended",
    "eslint:recommended",
    // Uses the recommended rules from @eslint-plugin-react
    "plugin:react/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    // Uses the recommended rules from the @typescript-eslint/eslint-plugin
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "rules": {
    // Place to specify ESLint rules. Can be used to overwrite rules specified from the extended configs
    // e.g. "@typescript-eslint/explicit-function-return-type": "off",
    //    "custom-rules/rule-absolute-relative-imports": [
    //      2,
    //      {
    //        "lintDirName": "src"
    //      },
    //      {
    //        "public": "public",
    //        "assets": "public/assets",
    //        "api": "src/App/api",
    //        "components": "src/App/components",
    //        "hocs": "src/App/hocs",
    //        "hooks": "src/App/hooks",
    //        "mocks": "src/App/mocks",
    //        "pages": "src/App/pages",
    //        "redux-store": "src/App/redux-store",
    //        "types": "src/App/types",
    //        "utils": "src/App/utils"
    //      }
    //    ],
    "react/jsx-curly-brace-presence": [
      1,
      {
        "props": "never",
        "children": "never"
      }
    ],
    "react/jsx-boolean-value": [
      1,
      "never"
    ],
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "disallowTypeAnnotations": false
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "variable",
        "types": [
          "boolean"
        ],
        "format": [
          "PascalCase"
        ],
        "prefix": [
          "is",
          "has"
        ]
      },
      {
        "selector": "variable",
        "format": [
          "strictCamelCase",
          "StrictPascalCase",
          "UPPER_CASE"
        ]
      },
      {
        "selector": "enum",
        "format": [
          "StrictPascalCase"
        ],
        "prefix": [
          "E"
        ]
      },
      {
        "selector": "enumMember",
        "format": [
          "StrictPascalCase"
        ]
      },
      {
        "selector": "interface",
        "format": [
          "StrictPascalCase"
        ],
        "prefix": [
          "I"
        ]
      },
      {
        "selector": "typeAlias",
        "format": [
          "StrictPascalCase"
        ],
        "prefix": [
          "T"
        ]
      },
      {
        "selector": "typeParameter",
        "format": [
          "StrictPascalCase"
        ],
        "prefix": [
          "G"
        ]
      }
    ],
    "import/order": [
      "error",
      {
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        },
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index"
        ],
        "pathGroups": [
          {
            "pattern": "react",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "react-router-dom",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "classnames",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "react-hook-form",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "react-focus-lock",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "react-test-renderer",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "@reduxjs/**",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "react-redux",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "axios",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "@omega/**",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "@vtb/**",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "host/**",
            "group": "external",
            "position": "before"
          }
        ],
        "pathGroupsExcludedImportTypes": [
          "builtin",
          "react"
        ],
        "newlines-between": "always"
      }
    ],
    "react/jsx-uses-react": "off",
    "react/react-in-jsx-scope": "off",
    "react/prop-types": 0,
    "no-debugger": "off",
    "@typescript-eslint/explicit-function-return-type": "error",
    "arrow-body-style": [
      2,
      "as-needed"
    ],
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/ban-types": "off",
    "@typescript-eslint/triple-slash-reference": 0,
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "prefer-destructuring": [
      "error",
      {
        "object": true,
        "array": true
      }
    ],
    "semi": [
      "error",
      "always"
    ],
    "import/prefer-default-export": "off",
    "react/sort-comp": [
      "error",
      {
        "order": [
          "defaultProps",
          "static-variables",
          "static-methods",
          "getDerivedStateFromProps",
          "state",
          "instance-variables",
          "constructor",
          "lifecycle",
          "getters",
          "setters",
          "instance-methods",
          "everything-else",
          "/^on.+$/",
          "/^handle.+$/",
          "/^render.+$/",
          "render"
        ],
        "groups": {
          "lifecycle": [
            "displayName",
            "propTypes",
            "contextTypes",
            "childContextTypes",
            "mixins",
            "statics",
            "getDefaultProps",
            "getInitialState",
            "getChildContext",
            "componentWillMount",
            "UNSAFE_componentWillMount",
            "componentDidMount",
            "componentWillReceiveProps",
            "UNSAFE_componentWillReceiveProps",
            "shouldComponentUpdate",
            "componentWillUpdate",
            "UNSAFE_componentWillUpdate",
            "getSnapshotBeforeUpdate",
            "componentDidUpdate",
            "componentDidCatch",
            "componentWillUnmount"
          ]
        }
      }
    ]
  },
  "overrides": [
    {
      "files": [
        "src/**/__mocks__/**/*",
        "src/**/*.test.*"
      ],
      "env": {
        "jest": true
      },
      "rules": {
        "@typescript-eslint/camelcase": "off",
        "@typescript-eslint/no-explicit-any": "off"
      }
    }
  ]
}
